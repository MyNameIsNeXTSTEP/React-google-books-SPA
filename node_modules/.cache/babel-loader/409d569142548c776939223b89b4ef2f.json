{"ast":null,"code":"import { SET_BOOKS, SET_LOADER, LOAD_MORE_BOOKS } from '../constants/ReduxConstants';\nimport { apiKey } from '../auth/apiKey';\nexport const setBooks = (books, ammount, searchText) => {\n  return {\n    type: SET_BOOKS,\n    payload: {\n      books,\n      ammount,\n      searchText\n    }\n  };\n};\nexport const loadMoreBooks = (newBooks, currentText) => {\n  return {\n    type: LOAD_MORE_BOOKS,\n    payload: {\n      newBooks,\n      currentText\n    }\n  };\n};\nexport const setLoader = loading => {\n  return {\n    type: SET_LOADER,\n    payload: loading\n  };\n};\nexport const getBooks = searchText => {\n  return dispatch => {\n    dispatch(setLoader(true));\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchText}&maxResults=30&key=${apiKey}`).then(response => {\n      if (response.status !== 200) {\n        throw new Error('Bad response from server');\n      }\n\n      dispatch(setLoader(false));\n      return response.json();\n    }).then(books => {\n      dispatch(setBooks(books.items, books.totalItems, searchText));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const loadMoreBooksAsync = (searchText, startIndex) => {\n  return dispatch => {\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchText}&startIndex=${startIndex}&maxResults=30&key=${apiKey}`).then(response => {\n      if (response.status !== 200) {\n        throw new Error('Bad response from server');\n      }\n\n      return response.json();\n    }).then(books => {\n      dispatch(loadMoreBooks(books.items, searchText));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/REACT/React-google-books-SPA/src/actions/actions.js"],"names":["SET_BOOKS","SET_LOADER","LOAD_MORE_BOOKS","apiKey","setBooks","books","ammount","searchText","type","payload","loadMoreBooks","newBooks","currentText","setLoader","loading","getBooks","dispatch","fetch","then","response","status","Error","json","items","totalItems","catch","error","console","log","loadMoreBooksAsync","startIndex"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,eAAhC,QAAuD,6BAAvD;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,UAAjB,KAAgC;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAER,SADD;AAELS,IAAAA,OAAO,EAAE;AACPJ,MAAAA,KADO;AAEPC,MAAAA,OAFO;AAGPC,MAAAA;AAHO;AAFJ,GAAP;AAQD,CATM;AAWP,OAAO,MAAMG,aAAa,GAAG,CAACC,QAAD,EAAWC,WAAX,KAA2B;AACtD,SAAO;AACLJ,IAAAA,IAAI,EAAEN,eADD;AAELO,IAAAA,OAAO,EAAE;AACPE,MAAAA,QADO;AAEPC,MAAAA;AAFO;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLN,IAAAA,IAAI,EAAEP,UADD;AAELQ,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,QAAQ,GAAIR,UAAD,IAAgB;AACtC,SAAQS,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACH,SAAS,CAAC,IAAD,CAAV,CAAR;AAEAI,IAAAA,KAAK,CAAE,iDAAgDV,UAAW,sBAAqBJ,MAAO,EAAzF,CAAL,CACGe,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACDL,MAAAA,QAAQ,CAACH,SAAS,CAAC,KAAD,CAAV,CAAR;AACA,aAAOM,QAAQ,CAACG,IAAT,EAAP;AACD,KAPH,EAQGJ,IARH,CAQSb,KAAD,IAAW;AACfW,MAAAA,QAAQ,CAACZ,QAAQ,CAACC,KAAK,CAACkB,KAAP,EAAclB,KAAK,CAACmB,UAApB,EAAgCjB,UAAhC,CAAT,CAAR;AACD,KAVH,EAWGkB,KAXH,CAWUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAbH;AAcC,GAjBH;AAkBD,CAnBM;AAqBP,OAAO,MAAMG,kBAAkB,GAAG,CAACtB,UAAD,EAAauB,UAAb,KAA4B;AAC5D,SAAQd,QAAD,IAAc;AAEnBC,IAAAA,KAAK,CAAE,iDAAgDV,UAAW,eAAcuB,UAAW,sBAAqB3B,MAAO,EAAlH,CAAL,CACGe,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANH,EAOGJ,IAPH,CAOSb,KAAD,IAAW;AACfW,MAAAA,QAAQ,CAACN,aAAa,CAACL,KAAK,CAACkB,KAAP,EAAchB,UAAd,CAAd,CAAR;AACD,KATH,EAUGkB,KAVH,CAUUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAZH;AAaC,GAfH;AAgBD,CAjBM","sourcesContent":["import { SET_BOOKS, SET_LOADER, LOAD_MORE_BOOKS } from '../constants/ReduxConstants';\nimport { apiKey } from '../auth/apiKey'\n\nexport const setBooks = (books, ammount, searchText) => {\n  return {\n    type: SET_BOOKS,\n    payload: {\n      books,\n      ammount,\n      searchText,\n    },\n  };\n};\n\nexport const loadMoreBooks = (newBooks, currentText) => {\n  return {\n    type: LOAD_MORE_BOOKS,\n    payload: {\n      newBooks,\n      currentText,\n    },\n  };\n};\n\nexport const setLoader = (loading) => {\n  return {\n    type: SET_LOADER,\n    payload: loading\n  }\n}\n\nexport const getBooks = (searchText) => {\n  return (dispatch) => {\n    dispatch(setLoader(true))\n\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchText}&maxResults=30&key=${apiKey}`)\n      .then((response) => {\n        if (response.status !== 200) {\n          throw new Error('Bad response from server');\n        }\n        dispatch(setLoader(false))\n        return response.json();\n      })\n      .then((books) => {\n        dispatch(setBooks(books.items, books.totalItems, searchText));\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n    };\n};\n\nexport const loadMoreBooksAsync = (searchText, startIndex) => {\n  return (dispatch) => {\n\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchText}&startIndex=${startIndex}&maxResults=30&key=${apiKey}`)\n      .then((response) => {\n        if (response.status !== 200) {\n          throw new Error('Bad response from server');\n        }\n        return response.json();\n      })\n      .then((books) => {\n        dispatch(loadMoreBooks(books.items, searchText));\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n    };\n};"]},"metadata":{},"sourceType":"module"}